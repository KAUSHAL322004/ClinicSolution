@page "/login"
@inject NavigationManager Navigation
@inject HttpClient Http
@using static System.Net.WebRequestMethods

<h3 class="text-center">Clinic Login</h3>

<div class="card p-3 shadow-lg">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
         
        <div class="mb-3">
            <label>Username</label>
            <InputText @bind-Value="loginModel.Username" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Password</label>
            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger mt-2">@errorMessage</p>
    }
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                // Save JWT token in local storage (using Blazored.LocalStorage later)
                Console.WriteLine($"TOKEN: {result?.Token}");
                errorMessage = null;
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid login, try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}
